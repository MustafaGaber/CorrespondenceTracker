// <auto-generated />
using System;
using CorrespondenceTracker.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CorrespondenceTracker.Data.Migrations
{
    [DbContext(typeof(CorrespondenceDatabaseContext))]
    [Migration("20251015191352_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ClassificationCorrespondence", b =>
                {
                    b.Property<Guid>("ClassificationsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CorrespondencesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ClassificationsId", "CorrespondencesId");

                    b.HasIndex("CorrespondencesId");

                    b.ToTable("ClassificationCorrespondence");
                });

            modelBuilder.Entity("CorrespondenceTracker.Domain.Entities.Attachment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CorrespondenceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateOnly?>("Date")
                        .HasColumnType("date");

                    b.Property<Guid>("FileRecordId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CorrespondenceId");

                    b.HasIndex("FileRecordId");

                    b.ToTable("Attachments", (string)null);
                });

            modelBuilder.Entity("CorrespondenceTracker.Domain.Entities.Classification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Classifications", (string)null);
                });

            modelBuilder.Entity("CorrespondenceTracker.Domain.Entities.Correspondence", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AssignedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CorrespondentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DepartmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Direction")
                        .HasColumnType("int");

                    b.Property<DateOnly?>("IncomingDate")
                        .HasColumnType("date");

                    b.Property<string>("IncomingNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsClosed")
                        .HasColumnType("bit");

                    b.Property<Guid?>("MainFileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly?>("OutgoingDate")
                        .HasColumnType("date");

                    b.Property<string>("OutgoingNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("PriorityLevel")
                        .HasColumnType("int");

                    b.Property<Guid?>("SubjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Summary")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AssignedUserId");

                    b.HasIndex("CorrespondentId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("Direction");

                    b.HasIndex("IncomingDate");

                    b.HasIndex("IncomingNumber");

                    b.HasIndex("MainFileId");

                    b.HasIndex("OutgoingDate");

                    b.HasIndex("OutgoingNumber");

                    b.HasIndex("SubjectId");

                    b.ToTable("Correspondences", (string)null);
                });

            modelBuilder.Entity("CorrespondenceTracker.Domain.Entities.Correspondent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.ToTable("Correspondents", (string)null);
                });

            modelBuilder.Entity("CorrespondenceTracker.Domain.Entities.Department", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Departments", (string)null);
                });

            modelBuilder.Entity("CorrespondenceTracker.Domain.Entities.FileRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Extension")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("RelativePath")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<long>("Size")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("FileRecords", (string)null);
                });

            modelBuilder.Entity("CorrespondenceTracker.Domain.Entities.FollowUp", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CorrespondenceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<Guid?>("FileRecordId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CorrespondenceId");

                    b.HasIndex("FileRecordId");

                    b.ToTable("FollowUps", (string)null);
                });

            modelBuilder.Entity("CorrespondenceTracker.Domain.Entities.Reminder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CorrespondenceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDismissed")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("RemindTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("SendEmailMessage")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CorrespondenceId");

                    b.HasIndex("RemindTime");

                    b.ToTable("Reminders", (string)null);
                });

            modelBuilder.Entity("CorrespondenceTracker.Domain.Entities.Subject", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Subjects", (string)null);
                });

            modelBuilder.Entity("CorrespondenceTracker.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("JobTitle")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("FullName");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("ClassificationCorrespondence", b =>
                {
                    b.HasOne("CorrespondenceTracker.Domain.Entities.Classification", null)
                        .WithMany()
                        .HasForeignKey("ClassificationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CorrespondenceTracker.Domain.Entities.Correspondence", null)
                        .WithMany()
                        .HasForeignKey("CorrespondencesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CorrespondenceTracker.Domain.Entities.Attachment", b =>
                {
                    b.HasOne("CorrespondenceTracker.Domain.Entities.Correspondence", "Correspondence")
                        .WithMany("Attachments")
                        .HasForeignKey("CorrespondenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CorrespondenceTracker.Domain.Entities.FileRecord", "FileRecord")
                        .WithMany()
                        .HasForeignKey("FileRecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Correspondence");

                    b.Navigation("FileRecord");
                });

            modelBuilder.Entity("CorrespondenceTracker.Domain.Entities.Correspondence", b =>
                {
                    b.HasOne("CorrespondenceTracker.Domain.Entities.User", "AssignedUser")
                        .WithMany()
                        .HasForeignKey("AssignedUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("CorrespondenceTracker.Domain.Entities.Correspondent", "Correspondent")
                        .WithMany()
                        .HasForeignKey("CorrespondentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CorrespondenceTracker.Domain.Entities.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("CorrespondenceTracker.Domain.Entities.FileRecord", "MainFile")
                        .WithMany()
                        .HasForeignKey("MainFileId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("CorrespondenceTracker.Domain.Entities.Subject", "Subject")
                        .WithMany()
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("AssignedUser");

                    b.Navigation("Correspondent");

                    b.Navigation("Department");

                    b.Navigation("MainFile");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("CorrespondenceTracker.Domain.Entities.FollowUp", b =>
                {
                    b.HasOne("CorrespondenceTracker.Domain.Entities.Correspondence", "Correspondence")
                        .WithMany("FollowUps")
                        .HasForeignKey("CorrespondenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CorrespondenceTracker.Domain.Entities.FileRecord", "FileRecord")
                        .WithMany()
                        .HasForeignKey("FileRecordId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Correspondence");

                    b.Navigation("FileRecord");
                });

            modelBuilder.Entity("CorrespondenceTracker.Domain.Entities.Reminder", b =>
                {
                    b.HasOne("CorrespondenceTracker.Domain.Entities.Correspondence", "Correspondence")
                        .WithMany("Reminders")
                        .HasForeignKey("CorrespondenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Correspondence");
                });

            modelBuilder.Entity("CorrespondenceTracker.Domain.Entities.Correspondence", b =>
                {
                    b.Navigation("Attachments");

                    b.Navigation("FollowUps");

                    b.Navigation("Reminders");
                });
#pragma warning restore 612, 618
        }
    }
}
